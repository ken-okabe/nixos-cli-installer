# /templates/home-manager-user.nix.template
#
# Home Manager configuration for the primary user.
# This file manages user-specific dotfiles, applications, and services.
{ pkgs, lib, config, inputs, ... }:

let
  # Username, Git username, and Git email are passed via specialArgs from flake.nix
  # The 'username' here refers to the system username, used for home.username and home.homeDirectory.
  # The 'gitUsername' and 'gitUseremail' are specifically for Git configuration.
  username = config.specialArgs.username;
  gitUsername = config.specialArgs.gitUsername;
  gitUseremail = config.specialArgs.gitUseremail;
  hostname = config.specialArgs.hostname; # Added to use hostname in aliases if needed
in
{
  # Set the state version for Home Manager.
  # This should generally match your NixOS system's stateVersion.
  home.stateVersion = "25.05"; # Adjust to your target NixOS version

  # Define packages to be installed specifically for this user via Home Manager.
  home.packages = with pkgs; [
    # pkgs.alacritty-themes is not directly used as theme is now disabled,
    # but if user decides to use themes later, it's good to have it.
    # Can be removed if no themes from this package are used.
    # alacritty-themes

    # Powerlevel10k and its dependencies
    zsh-powerlevel10k  # Powerlevel10k package itself
    (nerdfonts.override { fonts = [ "Meslo" ]; }) # Meslo Nerd Font (recommended).
                                                # You can also specify other Nerd Fonts,
                                                # e.g., "Hack", "FiraCode", "JetBrainsMono".
    git                # Required for Powerlevel10k's Git integration features.

    # Any other user-specific CLI tools or development utilities can go here.
    # Examples:
    # neovim
    # fzf     # Command-line fuzzy finder
    # ripgrep # Fast grep alternative
    # fd      # Simple, fast and user-friendly alternative to 'find'
  ];

  # Enable Home Manager itself. This is required.
  programs.home-manager.enable = true;

  # Configure Git for the user.
  programs.git = {
    enable = true;
    userName = gitUsername;  # Use the specific Git username provided during setup.
    userEmail = gitUseremail; # Use the specific Git email provided during setup.
    # You can add other Git configurations here, for example:
    # signing = {
    #   key = "YOUR_GPG_KEY_ID"; # Replace with your GPG key ID if you use commit signing.
    #   signByDefault = true;
    # };
    extraConfig = {
      init.defaultBranch = "main"; # Set default branch to 'main' for new repositories.
      # core.editor = "nano"; # Or your preferred editor.
    };
  };

  # Configure GitHub CLI (gh).
  programs.gh = {
    enable = true;
    # Use legacyPackages for extensions when nixpkgs is a Flake input.
    extensions = with inputs.nixpkgs.legacyPackages.${pkgs.system}; [ # Check if inputs is available here, passed via specialArgs.
      gh-markdown-preview # For previewing markdown files.
    ];
    settings = {
      editor = "nano";       # Default editor for gh commands.
      git_protocol = "ssh";  # Use SSH for Git operations with GitHub (recommended).
    };
  };

  # Configure Zsh shell.
  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;    # Enable command suggestions based on history.
    enableSyntaxHighlighting = true; # Enable syntax highlighting in the Zsh prompt.
                                     # Note: A common way is programs.zsh.syntaxHighlighting.enable = true;
                                     # Keeping this as per the original template.

    # If you were using Oh My Zsh, you would configure it here.
    # For this setup, we are using direct plugin management and Powerlevel10k.
    # ohMyZsh.enable = false;

    # You can add custom Zsh aliases, functions, or source other files here.
    shellAliases = {
      ll = "ls -l";
      update-system = "sudo nixos-rebuild switch --flake /etc/nixos#${hostname}"; # Use hostname from specialArgs
    };
    initExtra = ''
      # Custom Zsh settings
      export EDITOR=nano

      # Powerlevel10k initialization
      # Source the main Powerlevel10k theme script
      # This assumes zsh-powerlevel10k is in home.packages
      if [ -f "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme" ]; then
        source "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme"
      fi

      # Load user-specific Powerlevel10k configuration if it exists.
      # This file is generated by running `p10k configure`.
      if [[ -r "${config.home.homeDirectory}/.p10k.zsh" ]]; then
        source "${config.home.homeDirectory}/.p10k.zsh"
      else
        # Optionally, you might want to inform the user or trigger p10k configure.
        # For example, in an interactive shell:
        # if [[ -t 1 && $- = *i* ]]; then # If interactive shell
        #   echo "Powerlevel10k user configuration (~/.p10k.zsh) not found."
        #   echo "Consider running 'p10k configure' to set up your prompt."
        # fi
      fi
    '';
  };

  # Configure Powerlevel10k.
  # The `programs.powerlevel10k` module is not used in this direct setup.
  # Powerlevel10k is installed via `home.packages` and sourced in `programs.zsh.initExtra`.
  # programs.powerlevel10k = {
  #   enable = true;
  # };

  # Configure Alacritty terminal emulator.
  programs.alacritty = {
    enable = true; # Package is installed system-wide, this enables HM config.
    settings = {
      # Theme was requested to be disabled. Alacritty will use its default.
      # If you want a theme from pkgs.alacritty-themes later, you can use:
      # theme = "Name_Of_Theme_From_Package"; # e.g., "Solarized Dark"

      cursor = {
        style = { shape = "Beam"; blinking = "Always"; };
        blink_interval = 500;
        blink_timeout = 0;
        unfocused_hollow = false;
        thickness = 0.2;
      };
      window = {
        decorations = "None";
        opacity = 0.9;
        blur = true; # Note: blur might require a compositor like picom (X11) or Wayland compositor support.
        startup_mode = "Maximized";
      };
      font = {
        size = 13;
        # Ensure your Alacritty font is also set to a Nerd Font for P10k icons.
        # For example, if you installed "Meslo" Nerd Font via home.packages:
        # normal.family = "MesloLGS NF";
        # bold.family = "MesloLGS NF"; # Optional: if you want bold variant
        # italic.family = "MesloLGS NF"; # Optional: if you want italic variant
      };
      keyboard.bindings = [
        { key = "V"; mods = "Control"; action = "Paste"; }
        # Add other custom keybindings here if needed.
      ];
      # Configure shell to launch Zsh and then Zellij with specific configs.
      shell = {
        program = "${lib.getExe pkgs.zsh}"; # Use lib.getExe for robust path to Zsh.
        args = [
          "-c" # Instruct Zsh to execute the following command string.
          # Zellij executable path and arguments for config and layout files.
          # These config files are placed directly in $HOME by `home.file` below.
          "${lib.getExe pkgs.zellij} --config ${config.home.homeDirectory}/.key-bindings.kdl --layout ${config.home.homeDirectory}/.layout-file.kdl"
        ];
      };
    };
  };

  # Configure Zellij.
  programs.zellij = {
    enable = true; # Ensures Zellij package is available via HM if not in systemPackages,
                    # and allows for future structured Zellij settings via HM if supported.
    # Currently, Zellij configuration via Home Manager options is limited.
    # We will place the user's provided KDL files directly into their home directory.
  };

  # Place user-provided Zellij configuration files into $HOME.
  # The install script copies these from `templates/config/` to `/mnt/etc/nixos/` first.
  # Then, `source` here refers to those files relative to this `home-manager-user.nix` file.
  home.file.".key-bindings.kdl" = {
    source = ./key-bindings.kdl;
    # executable = false; # Default for home.file is non-executable.
  };
  home.file.".layout-file.kdl" = {
    source = ./layout-file.kdl;
  };

  # xremap configuration via Home Manager.
  # This relies on xremap-flake's Home Manager module being imported in flake.nix.
  services.xremap = {
    enable = true;
    # The xremap-flake Home Manager module handles package provision.
    # You might configure specific package version using inputs in flake.nix if needed.
    # package = inputs.xremap-flake.packages.${pkgs.system}.default; # Usually not needed here if module handles it.
    config = { # This structure depends on xremap-flake's Home Manager module.
      modmap = [
        {
          name = "User Global Remaps";
          remap = {
            "CapsLock" = "Ctrl_L"; # As per user request.
          };
        }
      ];
      # keymap = [ ... ]; # For more complex key combination remaps.
    };
    # withGnome = true; # Or similar options if provided by xremap-flake's HM module.
                      # Check xremap-flake documentation for available options.
  };

  # Standard XDG user directories.
  xdg.userDirs.enable = true;
  xdg.userDirs.createDirectories = true; # Creates dirs like ~/Videos, ~/Music etc.

  # Allow Home Manager to manage GSettings / dconf (for GNOME settings).
  # dconf.enable = true; # Usually enabled by default if you use dconf.settings.
  # Example dconf settings (to be explored post-install with `dconf watch /`):
  dconf.settings = {
    "org/gnome/desktop/interface" = {
      clock-format = "24h";
      # font-name = "Your Preferred Font 11";
    };
    "org/gnome/shell/extensions/dash-to-panel" = { # Example for an extension
      panel-position = "TOP";
    };
  };
}