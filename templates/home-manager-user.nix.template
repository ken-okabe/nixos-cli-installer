# /templates/home-manager-user.nix.template
#
# Home Manager configuration for the primary user.
# This file manages user-specific dotfiles, applications, and services.
{ pkgs, lib, config, inputs, ... }:

let
  # Username, Git username, and Git email are passed via specialArgs from flake.nix
  # The 'username' here refers to the system username, used for home.username and home.homeDirectory.
  # The 'gitUsername' and 'gitUseremail' are specifically for Git configuration.
  username = config.specialArgs.username;
  gitUsername = config.specialArgs.gitUsername;
  gitUseremail = config.specialArgs.gitUseremail;
  hostname = config.specialArgs.hostname;
in
{
  # Set the state version for Home Manager.
  # This should generally match your NixOS system's stateVersion.
  home.stateVersion = "25.05"; # Adjust to your target NixOS version

  # Define packages to be installed specifically for this user via Home Manager.
  home.packages = with pkgs; [
    zellij # Install Zellij

    # Powerlevel10k and its dependencies
    zsh-powerlevel10k  # Powerlevel10k package itself
    (nerdfonts.override { fonts = [ "Meslo" ]; }) # Meslo Nerd Font (recommended).
    git                # Required for Powerlevel10k's Git integration features.

    # Any other user-specific CLI tools or development utilities can go here.
    # Examples:
    # neovim
    # fzf     # Command-line fuzzy finder
    # ripgrep # Fast grep alternative
    # fd      # Simple, fast and user-friendly alternative to 'find'
  ];

  # Enable Home Manager itself. This is required.
  programs.home-manager.enable = true;

  # Configure Git for the user.
  programs.git = {
    enable = true;
    userName = gitUsername;  # Use the specific Git username provided during setup.
    userEmail = gitUseremail; # Use the specific Git email provided during setup.
    extraConfig = {
      init.defaultBranch = "main"; # Set default branch to 'main' for new repositories.
    };
  };

  # Configure GitHub CLI (gh).
  programs.gh = {
    enable = true;
    extensions = with inputs.nixpkgs.legacyPackages.${pkgs.system}; [
      gh-markdown-preview # For previewing markdown files.
    ];
    settings = {
      editor = "nano";       # Default editor for gh commands.
      git_protocol = "ssh";  # Use SSH for Git operations with GitHub (recommended).
    };
  };

  # Configure Zsh shell.
  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;    # Enable command suggestions based on history.
    enableSyntaxHighlighting = true; # Enable syntax highlighting in the Zsh prompt.

    shellAliases = {
      ll = "ls -l";
      update-system = "sudo nixos-rebuild switch --flake /etc/nixos#${hostname}";
    };
    initExtra = ''
      # Custom Zsh settings
      export EDITOR=nano

      # Powerlevel10k initialization
      if [ -f "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme" ]; then
        source "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme"
      fi
      if [[ -r "${config.home.homeDirectory}/.p10k.zsh" ]]; then
        source "${config.home.homeDirectory}/.p10k.zsh"
      fi
    '';
  };

  # Configure Alacritty terminal emulator.
  programs.alacritty = {
    enable = true;
    settings = {
      cursor = {
        style = { shape = "Beam"; blinking = "Always"; };
        blink_interval = 500;
        blink_timeout = 0;
        unfocused_hollow = false;
        thickness = 0.2;
      };
      window = {
        decorations = "None";
        opacity = 0.9;
        blur = true;
        startup_mode = "Maximized";
      };
      font = {
        size = 13;
        # normal.family = "MesloLGS NF"; # Example Nerd Font
      };
      keyboard.bindings = [
        { key = "V"; mods = "Control"; action = "Paste"; }
      ];
      shell = {
        program = "${lib.getExe pkgs.zsh}";
        args = [
          "-c"
          # Zellij will use its config from ~/.config/zellij/ (managed by xdg.configFile below)
          "${lib.getExe pkgs.zellij}"
        ];
      };
    };
  };

  # Place Zellij configuration files under ~/.config/zellij/ (using xdg.configFile).
  # KDL files are assumed to be in a './zellij_config/' directory
  # relative to where this Nix file is generated (e.g., in /etc/nixos/ upon installation),
  # as the install-nixos.sh script is expected to place them accordingly.
  xdg.configFile."zellij/key-bindings.kdl" = {
    source = ./zellij_config/key-bindings.kdl; # Path relative to this Nix file once generated.
  };

  xdg.configFile."zellij/layout.kdl" = { # Path relative to this Nix file once generated.
                                          # Zellij typically uses 'default.kdl' for the default layout
                                          # or a layout specified in 'config.kdl'.
                                          # You might want to name this 'default.kdl' or 'my_layout.kdl'
                                          # and ensure Zellij loads it.
    source = ./zellij_config/layout-file.kdl; # Assuming this is your primary layout or to be referenced.
  };

  # If you have a main Zellij configuration file (config.kdl), place it similarly:
  # xdg.configFile."zellij/config.kdl" = {
  #   source = ./zellij_config/config.kdl;
  # };

  # xremap configuration via Home Manager.
  services.xremap = {
    enable = true;
    config = {
      modmap = [
        {
          name = "User Global Remaps";
          remap = {
            "CapsLock" = "Ctrl_L";
          };
        }
      ];
    };
  };

  # Standard XDG user directories.
  xdg.userDirs.enable = true;
  xdg.userDirs.createDirectories = true;

  # dconf settings for GNOME.
  dconf.settings = {
    "org/gnome/desktop/interface" = {
      clock-format = "24h";
    };
    "org/gnome/shell/extensions/dash-to-panel" = {
      panel-position = "TOP";
    };
  };
}