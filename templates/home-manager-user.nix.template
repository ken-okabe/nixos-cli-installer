# /templates/home-manager-user.nix.template
#
# Home Manager configuration for the primary user.
# This file manages user-specific dotfiles, applications, and services.
{ pkgs, lib, config, inputs, specialArgs, ... }:

let
  username = specialArgs.username;
  gitUsername = specialArgs.gitUsername;
  gitUseremail = specialArgs.gitUseremail;
  hostname = specialArgs.hostname;
in
{
  home.stateVersion = "25.05"; # Ensure this matches system.stateVersion in your flake.nix

  # Define packages to be installed specifically for this user via Home Manager.
  home.packages = with pkgs; [

    zsh-history-substring-search # For prefix-based history search

    # Powerlevel10k and its dependencies
    zsh-powerlevel10k  # Powerlevel10k package itself
    # User has hackgen-nf-font system-wide, so Meslo is not needed here.
    git                # Required for Powerlevel10k's Git integration features.

    # Any other user-specific CLI tools or development utilities can go here.
    # Examples:
    # neovim
    # fzf     # Command-line fuzzy finder
    # ripgrep # Fast grep alternative
    # fd      # Simple, fast and user-friendly alternative to 'find'
  ];

  # Enable Home Manager itself. This is required.
  programs.home-manager.enable = true;

  # Configure Git for the user.
  programs.git = {
    enable = true;
    userName = gitUsername;
    userEmail = gitUseremail;
    extraConfig = {
      init.defaultBranch = "main";
    };
  };

  # Configure GitHub CLI (gh).
  programs.gh = {
    enable = true;
    extensions = with inputs.nixpkgs.legacyPackages.${pkgs.system}; [
      gh-markdown-preview
    ];
    settings = {
      editor = "nano"; # Or your preferred editor
      git_protocol = "ssh";
    };
  };

  # Configure Zsh shell.
  programs.zsh = {
    enable = true;
    autosuggestion.enable = true;    # Provided by zsh-autosuggestions plugin
    syntaxHighlighting.enable = true; # Provided by zsh-syntax-highlighting plugin
    autocd = true;
    shellAliases = {
      ll = "ls -la -F --color=auto --group-directories-first";
      update-system = "sudo nixos-rebuild switch --flake /etc/nixos#${hostname}";
    };
    initContent = ''
      # Custom Zsh settings
      export EDITOR=nano # Or your preferred editor

      # Powerlevel10k initialization
      if [ -f "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme" ]; then
        source "${pkgs.zsh-powerlevel10k}/share/zsh-powerlevel10k/powerlevel10k.zsh-theme"
      fi
      if [[ -r "${config.home.homeDirectory}/.p10k.zsh" ]]; then
        source "${config.home.homeDirectory}/.p10k.zsh"
      fi

      # Load zsh-history-substring-search plugin and bind keys
      # This plugin allows you to search history based on the current command line prefix.
      local history_substring_search_path="${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
      if [ -f "$history_substring_search_path" ]; then
        source "$history_substring_search_path"

        # Bind Up and Down arrow keys to history-substring-search widgets
        # "$terminfo[kcuu1]" is the Up arrow key
        # "$terminfo[kcud1]" is the Down arrow key
        bindkey "$terminfo[kcuu1]" history-substring-search-up
        bindkey "$terminfo[kcud1]" history-substring-search-down
      else
        echo "Warning: zsh-history-substring-search plugin not found at $history_substring_search_path" >&2
      fi

      export BUN_INSTALL="$HOME/.bun"
      export PATH="$BUN_INSTALL/bin:$PATH"
      
    ''; # End of initContent
  };

  # Configure Ghostty terminal emulator
  programs.ghostty = {
    enable = true;
    package = pkgs.ghostty; # Explicitly specify the package

    settings = {
      # Font settings (font-family is not set, Ghostty will use its default)
      font-size = 12;       # Example font size, adjust as needed
      # You can set font-family here if you choose one, e.g.:
      # font-family = "JetBrainsMono Nerd Font";

      # Background opacity (0.0 = fully transparent, 1.0 = fully opaque)
      background-opacity = 0.9;

      split-divider-color = "green";
      #gtk-titlebar = false;

      # Keybindings
      keybind = [
        # Copy/Paste
        "ctrl+shift+c=copy_to_clipboard"
        "ctrl+shift+v=paste_from_clipboard"

        "ctrl+g=copy_to_clipboard"
        "ctrl+v=paste_from_clipboard"

        # Pane/Split navigation and manipulation
        "ctrl+left=goto_split:left"
        "ctrl+down=goto_split:down"
        "ctrl+up=goto_split:up"
        "ctrl+right=goto_split:right"

        "ctrl+enter=new_split:down"            
        # Create a new split below the current one
      ];

      # Other Ghostty settings can be added here.
      # Refer to Ghostty's documentation for all available options:
      # https://ghostty.org/docs/config/reference
      # Example:
      # window-decoration = "none";
      # scrollback-lines = 10000;
    };

    # By default, Ghostty's default keybinds are used.
    # Set to true if you want to clear them before applying the keybinds above.
    clearDefaultKeybinds = false;

    # Enable Zsh shell integration
    enableZshIntegration = true;

    # Vim syntax installation is not enabled.
    # installVimSyntax = false;

    # Bat syntax installation will use its default (true if package is available).
    # installBatSyntax = true;
  };

  # Standard XDG user directories.
  xdg.userDirs.enable = true;
  xdg.userDirs.createDirectories = true;

  # dconf settings for GNOME.
  dconf.settings = {
    "org/gnome/desktop/interface" = {
      clock-format = "24h";
    };
    "org/gnome/shell/extensions/dash-to-panel" = {
      panel-position = "TOP";
    };
  };
}
