# /templates/system-customizations.nix.template
#
# This module contains various system-level customizations, such as
# kernel selection, Nix garbage collection settings, and package policies.
{ pkgs, lib, config, ... }: {

  # 1. Kernel Selection
  # Use the Zen kernel, which is optimized for desktop/multimedia performance
  # and responsiveness.
  boot.kernelPackages = pkgs.linuxKernel.packages.linux_zen;

  # 2. Nix Garbage Collection (GC) Configuration
  # Configures automatic garbage collection to reclaim disk space.
  nix.gc = {
    automatic = true;          # Run garbage collection automatically.
    dates = "weekly";          # How often to run (e.g., "daily", "weekly", "monthly", or specific cron expression).
    options = "--delete-older-than 7d"; # Delete generations older than 7 days.
                                       # Adjust "7d" (7 days) as needed (e.g., "30d" for 30 days).
  };

  # 3. Allow Unfree Packages
  # Set this to true to allow the installation of packages with licenses
  # that are not considered "free" by the FSF/Nixpkgs maintainers.
  # This is required for software like Google Chrome, VSCode (Microsoft build), etc.
  # By enabling this, you acknowledge and accept the terms of these licenses.
  nixpkgs.config.allowUnfree = true;

  # 4. Nix Settings (including experimental features and performance tuning)
  nix.settings = {
    # Enable Flakes and new Nix command support system-wide.
    experimental-features = [ "nix-command" "flakes" ];

    # Optional: Optimize Nix store after builds.
    # This can save some disk space by deduplicating identical files in the Nix store.
    # It might slightly increase build times.
    # auto-optimise-store = true; # Kept commented as in your base code.

    # --- Nix Daemon Settings for Download Performance ---
    # Increase download buffer size to 500MB, as per discussion from GitHub issue.
    # CRITICAL CAUTION: This is a VERY large value. It WILL consume significant RAM
    # if many downloads occur in parallel (potentially 500MB * http-connections).
    # Monitor system RAM usage very carefully. If your system has limited RAM
    # (e.g., less than 16GB, or depending on other running processes), this could
    # lead to swapping and SEVERELY DEGRADE performance or cause instability.
    # If issues arise, IMMEDIATELY try much smaller, more conservative values like:
    #   16777216 (16MB), 33554432 (32MB), or 67108864 (64MB).
    download-buffer-size = 524288000; # 500 * 1024 * 1024 bytes

    # Increase the number of parallel HTTP connections for downloads to 100.
    # CAUTION: This is a high number. It might strain your network or the
    # substituter server. Monitor if it provides actual benefits.
    # Default is typically 25.
    http-connections = 100;

    # Set max-jobs for builds.
    # "auto" (or 0) uses the number of CPU cores, which is generally recommended.
    # If you want to set it to double your CPU cores (e.g., for an 8-core CPU, set to 16),
    # replace "auto" with that specific number after checking your core count (e.g., with `nproc`).
    max-jobs = "auto"; # Or your calculated value, e.g., 16
  };

  # Enable VirtualBox host kernel modules
  virtualisation.virtualbox.host.enable = true;
  users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];

}