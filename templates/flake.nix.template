# /templates/flake.nix.template
# This is the central Flake file that defines the NixOS system configuration.
{
  description = "A declarative NixOS system configuration using Flakes";

  inputs = {
    # Nixpkgs (Nix Packages collection) pinned to a specific version for reproducibility.
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05"; # Or your preferred stable release or unstable.

    # Home Manager for managing user-specific dotfiles and services.
    home-manager = {
      url = "github:nix-community/home-manager/release-25.05"; # Matched to nixpkgs version.
      inputs.nixpkgs.follows = "nixpkgs"; # Ensure Home Manager uses the same Nixpkgs.
    };

  };

  outputs = { self, nixpkgs, home-manager, ... }@inputs:
  let
    # System architecture.
    system = "x86_64-linux";

    # Placeholders to be replaced by the install script.
    # These define the actual values that will be used throughout the configuration.
    nixosUsername_placeholder = "__NIXOS_USERNAME__";
    passwordHash_placeholder = "__PASSWORD_HASH__";
    gitUsername_placeholder = "__GIT_USERNAME__";
    gitUseremail_placeholder = "__GIT_USEREMAIL__";
    hostname_placeholder = "__HOSTNAME__";
    targetDiskForGrub_placeholder = "__TARGET_DISK_FOR_GRUB__"; # Used by bootloader.nix if GRUB is selected.

  in
  {
    # Define the NixOS system configuration.
    nixosConfigurations."${hostname_placeholder}" = nixpkgs.lib.nixosSystem {
      inherit system; # Specify the system architecture.
      specialArgs = {
        # Pass all Flake inputs to the modules.
        inherit inputs;
        # Pass the resolved values from placeholders to all NixOS modules.
        nixosUsername = nixosUsername_placeholder;
        passwordHash = passwordHash_placeholder;
        gitUsername = gitUsername_placeholder;
        gitUseremail = gitUseremail_placeholder;
        hostname = hostname_placeholder;
        targetDiskForGrub = targetDiskForGrub_placeholder;
      };
      modules = [
        # Core hardware configuration (generated, so path is relative to final location)
        ./hardware-configuration.nix

        # Dynamically inserted NixOS modules from the templates directory
        #__NIXOS_MODULE_IMPORTS_PLACEHOLDER__#

        # Home Manager integration
        home-manager.nixosModules.home-manager
        {
          home-manager.useGlobalPkgs = true;
          home-manager.useUserPackages = true;
          home-manager.extraSpecialArgs = {
            inherit inputs; # Pass Flake inputs to Home Manager modules.
            # Pass custom arguments to Home Manager modules.
            username = nixosUsername_placeholder;
            gitUsername = gitUsername_placeholder;
            gitUseremail = gitUseremail_placeholder;
            hostname = hostname_placeholder;
          };
          # Specify the Home Manager configuration for the primary user, using the resolved username.
          home-manager.users."${nixosUsername_placeholder}" = {
            imports = [
              # User-specific Home Manager configuration
              (import ./home-manager-user.nix) # This path is relative to the flake.nix location
            ];
          };
        }

        # System state version
        { system.stateVersion = "25.05"; } # Set to the NixOS version you are installing.
      ];
    };
  };
}