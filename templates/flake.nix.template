
# /templates/flake.nix.template
# This is the central Flake file that defines the NixOS system configuration.
{
  description = "A declarative NixOS system configuration using Flakes";

  inputs = {
    # Nixpkgs (Nix Packages collection) pinned to a specific version for reproducibility.
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-25.05"; # Or your preferred stable release or unstable.

    # Home Manager for managing user-specific dotfiles and services.
    home-manager = {
      url = "github:nix-community/home-manager/release-25.05"; # Matched to nixpkgs version.
      inputs.nixpkgs.follows = "nixpkgs"; # Ensure Home Manager uses the same Nixpkgs.
    };

  }; # Added semicolon based on common Nix flake structure, assuming 'outputs' follows. If this was the absolute last attribute in a prior version of the full file, it might have been optional.

  outputs = { self, nixpkgs, home-manager, ... }@inputs:
  let
    # System architecture.
    system = "x86_64-linux";

    # Variables to be replaced by the install script.
    # These are passed as specialArgs to NixOS and Home Manager modules.
    nixosUsername = "__NIXOS_USERNAME__"; # Placeholder for the main system username.
    gitUsername = "__GIT_USERNAME__";   # Placeholder for the Git commit username.
    gitUseremail = "__GIT_USEREMAIL__"; # Placeholder for the Git commit email.
    hostname = "__HOSTNAME__";         # Placeholder for the system hostname.
  in
  {
    # Define the NixOS system configuration.
    # The key (e.g., "${hostname}") should match the hostname chosen during installation.
    nixosConfigurations."${hostname}" = nixpkgs.lib.nixosSystem {
      inherit system; # Specify the system architecture.
      specialArgs = {
        # Pass all Flake inputs to the modules.
        inherit inputs;
        # Pass specific custom arguments to the modules.
        inherit nixosUsername gitUsername gitUseremail hostname; # Added hostname here as well

      };
      modules = [
        # Core hardware and boot configuration.
        ./hardware-configuration.nix # Generated by nixos-generate-config.
        ./bootloader.nix             # Bootloader setup (e.g., systemd-boot or GRUB).

        # System-wide settings and customizations.
        ./system-settings.nix        # Locale, time, keyboard layout.
        ./networking.nix             # Hostname, NetworkManager.
        ./sound.nix                  # PipeWire audio setup.
        ./bluetooth.nix              # Bluetooth support.
        ./virtualbox-guest.nix       # Settings for VirtualBox guest integration.
        ./system-customizations.nix  # Kernel, Nix GC, allowUnfree packages, Flakes enabling.

        # User and package management.
        ./users.nix                  # User accounts, passwords, sudo.
        ./system-packages.nix        # Base system-wide packages.
        ./extra-apps.nix             # Additional user applications.
        ./fonts-ime.nix              # Fonts and input Method Editor (Fcitx5).
        # Desktop Environment.
        ./gnome-desktop.nix          # GNOME Desktop Environment configuration.

        # Key remapping (NixOS system-level)
        ./key-remap.nix                                # Your specific xremap configuration for NixOS.

        # Home Manager integration for user-specific configurations.
        home-manager.nixosModules.home-manager # Enable the Home Manager NixOS module.
        {
          # Configure Home Manager itself.
          home-manager.useGlobalPkgs = true; # Allow Home Manager to access system-wide pkgs.
          home-manager.useUserPackages = true; # Allow user-specific packages via Home Manager.
          home-manager.extraSpecialArgs = {
            inherit inputs; # Pass Flake inputs to Home Manager modules.
            # Pass custom arguments to Home Manager modules.
            username = nixosUsername; # Note: HM uses 'username', NixOS modules use 'nixosUsername' via specialArgs.
            inherit gitUsername gitUseremail hostname; # Pass hostname for aliases etc.
          };
          # Specify the Home Manager configuration for the primary user.
          home-manager.users.${nixosUsername} = {
            imports = [
              # Import your existing user-specific configurations.
              (import ./home-manager-user.nix)
            ];
            # If you encounter issues with pkgs not being found in home-manager-user.nix,
            # you might need to explicitly pass pkgs here, though it's often inferred.
            # pkgs = nixpkgs.legacyPackages.${system};
          };
        }

        # This should be the last imported module or set directly.
        # It defines the NixOS release from which stateful settings defaults are taken.
        { system.stateVersion = "25.05"; } # Set to the NixOS version you are installing (or your target NixOS version).
      ];
    };
  };
}