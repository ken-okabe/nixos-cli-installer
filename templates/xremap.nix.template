# /templates/xremap.nix.template
#
# Configures xremap as a user service for key remapping,
# utilizing options provided by the xremap-flake.
# Ensure `inputs.xremap-flake.nixosModules.default` is included in your
# flake.nix's `modules` list for the NixOS configuration.
{ config, pkgs, lib, inputs, ... }:

let
  # Get the username from specialArgs passed by flake.nix.
  # This ensures xremap runs for the correct user.
  username = config.specialArgs.nixosUsername;
in
{
  # Configure the xremap service.
  # The exact option names (`services.xremap` or `services.xremap-daemon`, etc.)
  # and structure depend on the NixOS module provided by `xremap-flake`.
  # Please verify these against the xremap-flake documentation.
  # The following is based on common patterns and your provided HOWTO.md link.
  services.xremap = { # This top-level option name might differ based on xremap-flake's module.
                      # The HOWTO.md example used 'services.xremap'.
    enable = true;

    # Enable GNOME-specific integration for better application focus detection on Wayland.
    withGnome = true;

    # Run xremap as a user service, managed by the system.
    serviceMode = "user";
    userName = username;  # Specify the user for whom the service will run.

    # You can set other xremap service options here if needed, based on documentation:
    # watch = true; # To watch for new input devices.
    # deviceNames = [ "Your Keyboard Name" ]; # To restrict xremap to specific devices.

    # Define the key remapping configuration.
    # This structure should match what xremap-flake's NixOS module expects.
    config = {
      modmap = [
        {
          name = "Global Key Remaps"; # A descriptive name for this mapping set.
          remap = {
            # Remap CapsLock to Left Control, as per user request.
            "CapsLock" = "Ctrl_L";
          };
        }
        # Add more `modmap` entries for single key-to-key remappings if desired.
      ];

      # `keymap` entries are for remapping key combinations.
      # keymap = [
      #   {
      #     name = "Example Application Shortcut";
      #     application = { # Application-specific remapping (if xremap and its integration supports it)
      #       only = ["firefox"]; # Example: only apply in Firefox
      #     };
      #     remap = {
      #       "Ctrl-Shift-N" = "Ctrl-Alt-Delete"; # Example: remap Ctrl-Shift-N
      #     };
      #   }
      # ];
    };
  };

  # The xremap package itself is typically managed by the xremap-flake NixOS module
  # when `services.xremap.enable = true` (or its equivalent) is set.
  # You usually don't need to add `xremap` to `environment.systemPackages` manually here.
}
